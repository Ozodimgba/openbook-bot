"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeMint = exports.createAssociatedTokenAccountIdempotentInstruction = exports.getAssociatedTokenAddress = exports.roundTo5 = exports.nativeToUiDecimalsForBase = exports.nativeToUiDecimalsForQuote = exports.toUiDecimals = exports.toNative = exports.percentageToDecimal = exports.bpsToDecimal = exports.QUOTE_DECIMALS = exports.I64_MAX_BN = exports.U64_MAX_BN = void 0;
const web3_js_1 = require("@solana/web3.js");
const bn_js_1 = __importDefault(require("bn.js"));
const spl_token_1 = require("@solana/spl-token");
///
/// numeric helpers
///
exports.U64_MAX_BN = new bn_js_1.default('18446744073709551615');
exports.I64_MAX_BN = new bn_js_1.default('9223372036854775807').toTwos(64);
exports.QUOTE_DECIMALS = 6;
function bpsToDecimal(bps) {
    return bps / 10000;
}
exports.bpsToDecimal = bpsToDecimal;
function percentageToDecimal(percentage) {
    return percentage / 100;
}
exports.percentageToDecimal = percentageToDecimal;
function toNative(uiAmount, decimals) {
    return new bn_js_1.default((uiAmount * Math.pow(10, decimals)).toFixed(0));
}
exports.toNative = toNative;
function toUiDecimals(nativeAmount, decimals) {
    return nativeAmount / Math.pow(10, decimals);
}
exports.toUiDecimals = toUiDecimals;
function nativeToUiDecimalsForQuote(nativeAmount, quoteDecimals = exports.QUOTE_DECIMALS) {
    return toUiDecimals(nativeAmount, exports.QUOTE_DECIMALS);
}
exports.nativeToUiDecimalsForQuote = nativeToUiDecimalsForQuote;
function nativeToUiDecimalsForBase(nativeAmount, baseDecimals) {
    return toUiDecimals(nativeAmount, baseDecimals);
}
exports.nativeToUiDecimalsForBase = nativeToUiDecimalsForBase;
function roundTo5(number) {
    if (number < 1) {
        const numString = number.toString();
        const nonZeroIndex = numString.search(/[1-9]/);
        if (nonZeroIndex === -1 || nonZeroIndex >= numString.length - 5) {
            return number;
        }
        return Number(numString.slice(0, nonZeroIndex + 5));
    }
    else if (number < 10) {
        return (Math.floor(number) +
            Number((number % 1).toString().padEnd(10, '0').slice(0, 6)));
    }
    else if (number < 100) {
        return (Math.floor(number) +
            Number((number % 1).toString().padEnd(10, '0').slice(0, 5)));
    }
    else if (number < 1000) {
        return (Math.floor(number) +
            Number((number % 1).toString().padEnd(10, '0').slice(0, 4)));
    }
    else if (number < 10000) {
        return (Math.floor(number) +
            Number((number % 1).toString().padEnd(10, '0').slice(0, 3)));
    }
    return Math.round(number);
}
exports.roundTo5 = roundTo5;
///
///
/// web3js extensions
///
/**
 * Get the address of the associated token account for a given mint and owner
 *
 * @param mint                     Token mint account
 * @param owner                    Owner of the new account
 * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)
 * @param programId                SPL Token program account
 * @param associatedTokenProgramId SPL Associated Token program account
 *
 * @return Address of the associated token account
 */
async function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = true, programId = spl_token_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID) {
    if (!allowOwnerOffCurve && !web3_js_1.PublicKey.isOnCurve(owner.toBuffer()))
        throw new Error('TokenOwnerOffCurve!');
    const [address] = await web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);
    return address;
}
exports.getAssociatedTokenAddress = getAssociatedTokenAddress;
async function createAssociatedTokenAccountIdempotentInstruction(payer, owner, mint) {
    const account = await getAssociatedTokenAddress(mint, owner);
    return new web3_js_1.TransactionInstruction({
        keys: [
            { pubkey: payer, isSigner: true, isWritable: true },
            { pubkey: account, isSigner: false, isWritable: true },
            { pubkey: owner, isSigner: false, isWritable: false },
            { pubkey: mint, isSigner: false, isWritable: false },
            {
                pubkey: web3_js_1.SystemProgram.programId,
                isSigner: false,
                isWritable: false,
            },
            { pubkey: spl_token_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
        ],
        programId: spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID,
        data: Buffer.from([0x1]),
    });
}
exports.createAssociatedTokenAccountIdempotentInstruction = createAssociatedTokenAccountIdempotentInstruction;
function decodeMint(data) {
    return spl_token_1.MintLayout.decode(data);
}
exports.decodeMint = decodeMint;
